# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020-2022 Intel Corporation

---
defaultRules:
  create: false
# Alertmanager options (Not present in DEK)
alertmanager:
  enabled: false
# Grafana is deployed as a separate chart
grafana:
  enabled: false
# KubeApiServer: disable for now
kubeApiServer:
  enabled: false
# Kubelet metrics
kubelet:
  enabled: false
# Kube controller manager
kubeControllerManager:
  enabled: false
# CoreDNS
coreDns:
  enabled: false
# Kube ETCD
kubeEtcd:
  enabled: false
# Kube Scheduler
kubeScheduler:
  enabled: false
# Kube Proxy
kubeProxy:
  enabled: false
# Kube state metrics
kubeStateMetrics:
  enabled: true
# Node Exporter
nodeExporter:
  enabled: false # We already have node-exporter installation in separate chart


fullnameOverride: "prometheus" # do not use kube-prometheus-stack

# Prometheus Operator
prometheusOperator:
  enabled: true
  # Use TLS
  tls:
    enabled: true
  # Configure admission Webhooks (validating manifests)
  admissionWebhooks:
    enabled: true
    patch:
      enabled: false
    certManager:
      enabled: true
      issuerRef:
        name: "ca-issuer"
        kind: "ClusterIssuer"
  serviceMonitor:
    selfMonitor: true

  prometheusConfigReloader:
    image:
      repository: quay.io/prometheus-operator/prometheus-config-reloader
      tag: "{{ _prometheus_config_reloader_version }}"

  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
  # Prometheus Operator should deploy on master node
  nodeSelector:
    node-role.kubernetes.io/control-plane: ''

prometheus:
  enabled: true
  # Prometheus service options
  service:
    annotations: {}
    labels: {}
    clusterIP: ""
    {% if telemetry_prometheus_nodeport_expose %}
    type: NodePort
    nodePort: {{ telemetry_prometheus_nodeport }}
    {% endif %}

  serviceMonitor:
    selfMonitor: true
    scheme: HTTPS
    tlsConfig:
      keySecret:
        key: tls.key
        name: "{{ telemetry_prometheus_tls_secret_name }}"
      ca:
        secret:
          key: ca.crt
          name: "{{ telemetry_prometheus_tls_secret_name }}"
      cert:
        secret:
          key: tls.crt
          name: "{{ telemetry_prometheus_tls_secret_name }}"
      insecureSkipVerify: true # Prometheus should trust itself
    relabelings:
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - sourceLabels: [__meta_kubernetes_pod_name]
        regex: 'prometheus.*'
        action: keep
      - sourceLabels: [__address__]
        regex: '.*:.*'
        action: keep
      - sourceLabels: [__meta_kubernetes_pod_node_name]
        action: replace
        targetLabel: instance
      - sourceLabels: [__meta_kubernetes_pod_name]
        action: replace
        targetLabel: kubernetes_pod_name

  # Prometheus server options
  prometheusSpec:
    # How often should Prometheus scrape data
    scrapeInterval: "{{ telemetry_prometheus_scrape_interval_seconds }}s"
    scrapeTimeout: 20s
    # How long should Prometheus keep metrics
    retention: "{{ telemetry_prometheus_retention }}"
    {% if telemetry_prometheus_alertmanager_targets is defined and telemetry_prometheus_alertmanager_targets|length > 0 %}
    additionalAlertManagerConfigs:
      - path_prefix: /
        scheme: https
        timeout: 10s
        api_version: v2
        tls_config:
          ca_file: /etc/se/ca/cacert.crt
          cert_file: /etc/se/certs/tls.crt
          key_file: /etc/se/certs/tls.key
        static_configs:
          - targets: {{ telemetry_prometheus_alertmanager_targets }}
    {% endif %}
    image:
      repository: quay.io/prometheus/prometheus
      tag: "{{ _prometheus_image_version }}"
    web:
      tlsConfig:
        keySecret:
          key: tls.key
          name: "{{ telemetry_prometheus_tls_secret_name }}"
        client_ca:
          secret:
            key: ca.crt
            name: "{{ telemetry_prometheus_tls_secret_name }}"
        cert:
          secret:
            key: tls.crt
            name: "{{ telemetry_prometheus_tls_secret_name }}"
        clientAuthType: RequestClientCert
    remoteWrite: {{ telemetry_prometheus_remote_write_targets }}
    {% if telemetry_prometheus_alertmanager_targets is defined and telemetry_prometheus_alertmanager_targets|length > 0 %}
    volumeMounts:
    # Controller CA Cert used for prometheus alertmanager -> controller alertmanager communication
    - name: smart-edge-ca
      mountPath: "/etc/se/ca"
      readOnly: true    
    # Client certs for prometheus to communicate with the controller
    - name: se-prometheus-ssl-cert
      mountPath: "/etc/se/certs"
      readOnly: true    
    volumes:
    - name: smart-edge-ca
      configMap:
        name: smart-edge-ca
    - name: se-prometheus-ssl-cert
      secret:
        secretName: se-prometheus-ssl-cert
    {% endif %}
    storageSpec:
      volumeClaimTemplate:
        metadata:
          name: "prometheus-volume"
        spec:
          {% if openebs_enabled is false %}
          storageClassName: prometheus
          {% else %}
          storageClassName: openebs-lvmpv
          {% endif %}
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
    initContainers:
      - name: setup-permissions
        image: busybox
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          runAsNonRoot: false
        volumeMounts:
          - name: "prometheus-volume"
            mountPath: /data
        command: ["/bin/chmod","-R","777", "/data"]
    externalLabels:
      clusterName: "{{ hostvars[groups['controller_group'][0]]["cluster_name"] }}"

    tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
    # Prometheus should deploy on master node
    nodeSelector:
      node-role.kubernetes.io/control-plane: ''

    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
