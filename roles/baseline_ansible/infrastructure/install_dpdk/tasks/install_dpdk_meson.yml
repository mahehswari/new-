# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2021 Intel Corporation

---
- name: install Python3 from epel-release
  package:
    name:
      - python36
      - python36-devel
      - libselinux-python
    state: present
    enablerepo: "epel"
  become: yes
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_version < '8'

- name: get current kernel
  command: uname -r
  register: unamer
  changed_when: false

- name: build and install dpdk using meson and ninja tools
  block:
    - name: install building tools as python packages
      pip:
        name:
          - selinux
          - meson>=0.53.2
          - ninja>=1.10.0
          - pyelftools>=0.26
        state: present
      become: yes
      register: pip_result
      retries: "{{ number_of_retries | default(5) }}"
      until: pip_result is succeeded
      delay: "{{ retry_delay | default(3) }}"

    - name: check if igb_uio.ko already compiled
      stat:
        path: "{{ dpdk_install_dir }}/kmods/linux/igb_uio/igb_uio.ko"
      register: igb_uio_module_compiled

    - name: check if rte_kni.ko already compiled
      stat:
        path: "{{ dpdk_install_dir }}/{{ dpdk_target }}/kernel/linux/kni/rte_kni.ko"
      register: rte_kni_module_compiled

    - name: test if kernel stamp file exists
      stat:
        path: "{{ dpdk_install_dir }}/kernel_stamp_file"
      register: stat_result

    - name: get kernel stamp
      command: cat "{{ dpdk_install_dir }}/kernel_stamp_file"
      register: kernel_stamp
      changed_when: false
      when: stat_result.stat.exists

    - name: remove dpdk_target dir
      file:
        path: "{{ dpdk_install_dir }}/{{ dpdk_target }}"
        state: absent
      when: not igb_uio_module_compiled.stat.exists or not rte_kni_module_compiled.stat.exists
            or (stat_result.stat.exists and not unamer.stdout in kernel_stamp.stdout)

    - name: create/update kernel stamp file
      copy:
        dest: "{{ dpdk_install_dir }}/kernel_stamp_file"
        content: |
          {{ unamer.stdout }}
        mode: a=r,u+w
        owner: "{{ ansible_user | default(ansible_user_id) }}"
      when: not stat_result.stat.exists or not unamer.stdout in kernel_stamp.stdout

    - name: configure meson builder with virtio-user support and PCAP PMD enabled
      command:
        argv:
          - "meson"
          - "-Dmachine=default"
          - "-Dtests=false"
          - "-Denable_kmods=true"
          - "-Dc_args=-DRTE_VIRTIO_USER=y,-DRTE_LIBRTE_PMD_PCAP=y"
          - "{{ dpdk_target }}"
      args:
        chdir: "{{ dpdk_install_dir }}"
        creates: "{{ dpdk_target }}"
      register: result
      changed_when: result.rc == 0

    - name: build DPDK with ninja
      command:
        argv:
          - "ninja"
          - "-C"
          - "{{ dpdk_install_dir }}/{{ dpdk_target }}"
      register: build_rc
      changed_when: "build_rc.rc == 0"
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Ensure dpdk libs is in loader search path on RHEL/CentOS
  copy:
    dest: "/etc/ld.so.conf.d/libdpdk-x86_64.conf"
    content: "/usr/local/lib64/"
    mode: a=r,u+w
    owner: root
    group: root
  become: yes
  when: ansible_os_family == "RedHat"

- name: update ld cache
  command:
    argv:
      - "ldconfig"
  args:
    chdir: "{{ dpdk_install_dir }}/{{ dpdk_target }}"
  register: ld_rc
  become: yes
  changed_when: "ld_rc.rc == 0"

- name: find dpdk tools
  find:
    path: "{{ dpdk_install_dir }}"
    patterns: "dpdk-devbind.py"
    recurse: true
  register: dpdk_tools_dir

- name: set path to dpdk usertools directory
  set_fact:
    dpdk_tools: "{{ dpdk_tools_dir.files[0].path }}"

- name: install dpdk-devbind.py in /usr/local/bin
  copy:
    remote_src: true
    src: "{{ dpdk_tools }}"
    dest: "/usr/local/bin/dpdk-devbind.py"
    mode: a=r,u+wx
    owner: "{{ ansible_user | default(ansible_user_id) }}"
  become: yes

- name: clone intel module
  git:
    repo: "{{ dpdk_kmods_repo }}"
    dest: "{{ dpdk_kmods_dest }}"
    version: 'main'
    force: true

- name: apply fix to Makefile
  replace:
    path: "{{ dpdk_kmods_dest }}/linux/igb_uio/Makefile"
    regexp: "\\(PWD\\)"
    replace: "(CURDIR)"
    mode: a=r,u+w

- name: build intel module
  community.general.system.make:
    chdir: "{{ dpdk_kmods_dest }}/linux/igb_uio"

- name: get current kernel
  command: uname -r
  register: unamer
  changed_when: false

- name: copy kernel modules
  copy:
    src: "{{ dpdk_install_dir }}/{{ item }}"
    dest: "/lib/modules/{{ unamer.stdout }}/kernel/drivers/"
    remote_src: true
    mode: a=r,u+w
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: root
  loop:
    - "kmods/linux/igb_uio/igb_uio.ko"
    - "{{ dpdk_target }}/kernel/linux/kni/rte_kni.ko"
  become: yes

- name: depmod
  command: depmod -a
  changed_when: true
  become: yes

- name: copy list of modules to load at boot
  copy:
    src: dpdk.conf
    dest: /etc/modules-load.d/dpdk.conf
    mode: a=r,u+w
    owner: "{{ ansible_user | default(ansible_user_id) }}"
  become: yes

- name: copy list of modules to modprobe at boot
  copy:
    src: dpdk0kni.conf
    dest: /etc/modprobe.d/dpdk0kni.conf
    mode: a=r,u+w
    owner: "{{ ansible_user | default(ansible_user_id) }}"
  become: yes

- name: unload modules
  community.general.system.modprobe:
    name: "{{ item }}"
    state: absent
  loop:
    - "igb_uio"
    - "rte_kni"
    - "uio_pci_generic"
    - "uio"
  become: yes

- name: unload vfio
  community.general.system.modprobe:
    name: "{{ item }}"
    state: absent
  loop:
    - "vfio-pci"
    - "vfio_iommu_type1"
    - "kvmgt"
    - "vfio_mdev"
    - "vfio"
  become: yes

- name: load uio and igb_uio modules
  community.general.system.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - "uio"
    - "igb_uio"
  become: yes

- name: load rte_kni module
  community.general.system.modprobe:
    name: "rte_kni"
    state: present
    params: "carrier=on"
  become: yes

- name: load vfio module
  community.general.system.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - "vfio"
    - "vfio-pci"
  failed_when: false
  become: yes
